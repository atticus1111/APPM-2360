%% 10

y=funct(4)


function S =funct(n)

S=[];

m=n;

for i= 1:n

    for j= 1:m
       
        S(i,j)=rand;
    end
end


end

%% 11

x=y^-1;

I=x*y


%% 12
clear size;
%sqrt((2/n))sin((pi*(i-1/2)*(j-1/2))/n)

% Y=SX_gS^T

%Xg is a matrix whose (i, j) entry represents the grayscale level at pixel position (i, j). In our case, the values range from 0 to 255, with 0 being black and 255 being white.


%{

s= [];
for i=1:n
    for j=1:m

    sqrt((2/n))sin((pi*(i-1/2)*(j-1/2))/n);

    end
end
%}


%reading in image
X_double = double(imread('square.jpg'));
imwrite(uint8(X_double),'rectangle.jpg');

%converting to greyscale
X_gray= (X_double(:,:,1)/3.0 + X_double(:,:,2)/3.0 + X_double(:,:,3)/3.0);
imagesc(uint8(X_gray));
colormap('gray');

%finding size of input immage array
[r,c]=size(X_gray);

%creating S matrix with size = to image size
S=funct2(r);

%transfomred matrix
Y=S*X_gray*S';


%untransforming matrix
x_g=S'*Y*S;
figure;imagesc(x_g); 
colormap('gray');

%making S function
function S =funct2(n)
S=zeros(n,n);
m=n;

for i= 1:n
    for j= 1:m
        S(i,j)=sqrt((2/n))*sin((pi*(i-1/2)*(j-1/2))/n);
    end
end
end

%% 13

%reading in image
X_double = double(imread('square.jpg'));
imwrite(uint8(X_double),'rectangle.jpg');

%3 color matricies
R = X_double(:,:,1);
G = X_double(:,:,2);
B = X_double(:,:,3);

%redefining colors 
p=0.5;
R=DSTelim(R);
G=DSTelim(G);
B=DSTelim(B);

%viewing
color_modified = uint8(cat(3, R, G, B));
imagesc(color_modified);



%functions 

%DST and elimination 
function [B,T]=DSTelim(A,p)

%finding size of input immage array
[r,~]=size(A);

%creating S matrix with size = to image size
S=funct2(r);

%transform matrix
T=S*A*S';

%elimination
% when p=0, no data are saved
% when p=1, all data are saved
p=p;
for i = 1:r
    for j = 1:r
        if (i+j > p*2*r)
            T(i,j) = 0;
        end
    end
end

%untransform

B=S'*T*S;
end

%% 14-15

%reading in image
X_double = double(imread('square.jpg'));
imwrite(uint8(X_double),'rectangle.jpg');



%3 color matricies
R = X_double(:,:,1);
G = X_double(:,:,2);
B = X_double(:,:,3);

%redefining colors 
p=0.05
[R,R_T]=DSTelim(R,p);
[G,G_T]=DSTelim(G,p);
[B,B_T]=DSTelim(B,p);

nnz1 = nnz(R) + nnz(G) + nnz(B)
nnz2  = nnz(R_T) + nnz(G_T) + nnz(B_T)
compression_ratio = nnz1 / nnz2


%viewing
color_modified = uint8(cat(3, R, G, B));
imagesc(color_modified);



